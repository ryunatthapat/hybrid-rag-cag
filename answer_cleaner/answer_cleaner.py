import os
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def clean_answer(raw_answer: str, query: str = None) -> str:
    """
    Post-process and enhance the answer generated by RAG or CAG modules using OpenAI LLM.
    This function rephrases the answer for clarity, conciseness, and friendliness.

    Args:
        raw_answer (str): The answer generated by the RAG or CAG module.
        query (str, optional): The original user query, for context.

    Returns:
        str: The cleaned and enhanced answer.
    """
    if not client.api_key:
        print("No API key found. Returning raw answer.")
        # If no API key, return the raw answer
        return raw_answer

    prompt = (
        "You are an expert assistant. "
        "Rephrase the following answer to be clear, concise, friendly and human-like."
        "If the answer is already good, you may return it unchanged.\n"
    )
    if query:
        prompt += f"\nUser question: {query}"
    prompt += f"\nAnswer: {raw_answer}"

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a helpful assistant that improves answers."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=256,
            temperature=0.3,
        )
        cleaned = response.choices[0].message.content.strip()
        return cleaned
    except Exception as e:
        # On error, return the raw answer
        print(f"Error: {e}")
        return raw_answer

if __name__ == "__main__":
    # Example test
    sample_query = "What is PALO IT?"
    sample_raw_answer = "PALO IT is a global technology consul firm that helps organizations transform their businesses through sustainable digital solutions."
    print("Raw answer:")
    print(sample_raw_answer)
    print("\nCleaned answer:")
    cleaned = clean_answer(sample_raw_answer, sample_query)
    print(cleaned)
